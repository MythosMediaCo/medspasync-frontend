version: '3.8'

services:
  # AI Reconciliation Engine - Production
  ai-engine:
    build: .
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_VERSION=1.0.0
      - MAX_WORKERS=8
      - BATCH_SIZE=200
      - MODEL_THRESHOLD=0.95
      - HIPAA_COMPLIANCE_MODE=true
      - DATA_ENCRYPTION_ENABLED=true
      - AUDIT_LOGGING_ENABLED=true
      - CORS_ORIGINS=https://app.medspasyncpro.com,https://demo.medspasyncpro.com,https://marketing.medspasyncpro.com
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS=1000
      - RATE_LIMIT_WINDOW=3600
      - PROMETHEUS_ENABLED=true
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://ai_king:kingdom_secure_2024@postgres:5432/medspa_ai_prod
      - ALLOWED_FILE_TYPES=csv,xlsx,xls
      - MAX_FILE_SIZE=52428800
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backups:/app/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/quick"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis
      - postgres
    networks:
      - ai-kingdom

  # Database - Production
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: medspa_ai_prod
      POSTGRES_USER: ai_king
      POSTGRES_PASSWORD: kingdom_secure_2024
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - ai-kingdom

  # Redis - Production
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass kingdom_redis_2024
    networks:
      - ai-kingdom

  # Nginx Reverse Proxy - Production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-engine
    restart: unless-stopped
    networks:
      - ai-kingdom

  # Prometheus Monitoring - Production
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai-kingdom
    restart: unless-stopped

  # Grafana Dashboard - Production
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=kingdom_grafana_2024
    volumes:
      - grafana_prod_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - ai-kingdom
    restart: unless-stopped

volumes:
  postgres_prod_data:
  redis_prod_data:
  prometheus_prod_data:
  grafana_prod_data:

networks:
  ai-kingdom:
    driver: bridge 