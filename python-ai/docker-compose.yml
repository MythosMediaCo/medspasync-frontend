version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: medspasync_postgres
    environment:
      POSTGRES_DB: medspasync_ai
      POSTGRES_USER: medspasync_user
      # Use environment variable for password - DO NOT hardcode in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-default_password_change_in_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - medspasync_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: medspasync_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-default_redis_password_change_in_production}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - medspasync_network
    restart: unless-stopped

  # AI API Service
  ai-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medspasync_ai_api
    environment:
      - DATABASE_URL=postgresql://medspasync_user:${POSTGRES_PASSWORD:-default_password_change_in_production}@postgres:5432/medspasync_ai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-default_redis_password_change_in_production}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-default_jwt_secret_change_in_production}
      - API_KEY=${API_KEY:-default_api_key_change_in_production}
      - NODE_ENV=production
      - LOG_LEVEL=info
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - medspasync_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: medspasync_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - ai-api
    networks:
      - medspasync_network
    restart: unless-stopped

  # Grafana Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: medspasync_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      # Use environment variable for password - DO NOT hardcode in production
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-default_grafana_password_change_in_production}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - medspasync_network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: medspasync_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - medspasync_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  medspasync_network:
    driver: bridge 