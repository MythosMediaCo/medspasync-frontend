import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext.jsx';
import OnboardingProgressTracker from '../../services/OnboardingProgressTracker.js';
import './GuidedOnboardingWizard.css';

const GuidedOnboardingWizard = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [completedSteps, setCompletedSteps] = useState([]);
  const [progress, setProgress] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [showTooltip, setShowTooltip] = useState(false);
  const [tooltipContent, setTooltipContent] = useState('');
  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });
  const [userData, setUserData] = useState({});
  const [practiceData, setPracticeData] = useState({});
  const navigate = useNavigate();
  const location = useLocation();
  const { user, updateUser } = useAuth();

  const totalSteps = 7;
  const progressTracker = new OnboardingProgressTracker();

  const steps = [
    {
      id: 1,
      title: 'Welcome to MedSpaSync Pro',
      description: 'Let\'s get you set up in just a few minutes',
      icon: '🎉',
      component: 'WelcomeStep',
      tooltip: 'Welcome! This quick setup will help you get the most out of MedSpaSync Pro.'
    },
    {
      id: 2,
      title: 'Upload Your First File',
      description: 'Upload a sample file to see how reconciliation works',
      icon: '📁',
      component: 'UploadStep',
      tooltip: 'Upload any CSV or Excel file from your POS system to see our AI in action.'
    },
    {
      id: 3,
      title: 'Review Results',
      description: 'See how our AI analyzed your data',
      icon: '🔍',
      component: 'ReviewStep',
      tooltip: 'Review the discrepancies found and insights generated by our AI.'
    },
    {
      id: 4,
      title: 'Configure Settings',
      description: 'Customize your preferences and integrations',
      icon: '⚙️',
      component: 'SettingsStep',
      tooltip: 'Set up your preferences, notification settings, and integrations.'
    },
    {
      id: 5,
      title: 'Invite Team Members',
      description: 'Add your team to collaborate',
      icon: '👥',
      component: 'TeamStep',
      tooltip: 'Invite your staff members to access the platform with appropriate permissions.'
    },
    {
      id: 6,
      title: 'Set Up Integrations',
      description: 'Connect your POS and payment systems',
      icon: '🔗',
      component: 'IntegrationsStep',
      tooltip: 'Connect your existing POS system for automatic data synchronization.'
    },
    {
      id: 7,
      title: 'Complete Setup',
      description: 'You\'re all set to start saving time and money',
      icon: '✅',
      component: 'CompleteStep',
      tooltip: 'Congratulations! You\'re ready to start using MedSpaSync Pro.'
    }
  ];

  useEffect(() => {
    // Load onboarding progress from backend
    loadOnboardingProgress();
    
    // Check if user came from demo
    if (location.state?.fromDemo) {
      setUserData(location.state.roiData || {});
    }
  }, [location.state]);

  const loadOnboardingProgress = async () => {
    try {
      setIsLoading(true);
      const progress = await progressTracker.getProgress(user?.id);
      
      if (progress) {
        setCurrentStep(progress.currentStep);
        setCompletedSteps(progress.completedSteps || []);
        setProgress(progress.progress || 0);
      }
    } catch (error) {
      console.error('Failed to load onboarding progress:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const updateProgress = useCallback(async (stepId, data = {}) => {
    try {
      const newCompletedSteps = [...new Set([...completedSteps, stepId])];
      const newProgress = (newCompletedSteps.length / totalSteps) * 100;
      
      setCompletedSteps(newCompletedSteps);
      setProgress(newProgress);
      
      // Update backend
      await progressTracker.updateProgress(user?.id, {
        currentStep: stepId + 1,
        completedSteps: newCompletedSteps,
        progress: newProgress,
        stepData: { ...userData, ...data }
      });
      
      // Move to next step
      if (stepId < totalSteps) {
        setCurrentStep(stepId + 1);
      }
    } catch (error) {
      console.error('Failed to update progress:', error);
    }
  }, [completedSteps, user?.id, userData]);

  const showContextualTooltip = useCallback((content, event) => {
    const rect = event.target.getBoundingClientRect();
    setTooltipContent(content);
    setTooltipPosition({
      x: rect.left + rect.width / 2,
      y: rect.top - 10
    });
    setShowTooltip(true);
  }, []);

  const hideTooltip = useCallback(() => {
    setShowTooltip(false);
  }, []);

  const handleStepComplete = useCallback(async (stepId, data = {}) => {
    await updateProgress(stepId, data);
  }, [updateProgress]);

  const handleSkipStep = useCallback(async (stepId) => {
    await updateProgress(stepId);
  }, [updateProgress]);

  const renderStepContent = () => {
    const currentStepData = steps.find(step => step.id === currentStep);
    
    switch (currentStepData?.component) {
      case 'WelcomeStep':
        return (
          <WelcomeStep
            onComplete={(data) => handleStepComplete(currentStep, data)}
            onSkip={() => handleSkipStep(currentStep)}
            showTooltip={showContextualTooltip}
            hideTooltip={hideTooltip}
            userData={userData}
          />
        );
      case 'UploadStep':
        return (
          <UploadStep
            onComplete={(data) => handleStepComplete(currentStep, data)}
            onSkip={() => handleSkipStep(currentStep)}
            showTooltip={showContextualTooltip}
            hideTooltip={hideTooltip}
          />
        );
      case 'ReviewStep':
        return (
          <ReviewStep
            onComplete={(data) => handleStepComplete(currentStep, data)}
            onSkip={() => handleSkipStep(currentStep)}
            showTooltip={showContextualTooltip}
            hideTooltip={hideTooltip}
          />
        );
      case 'SettingsStep':
        return (
          <SettingsStep
            onComplete={(data) => handleStepComplete(currentStep, data)}
            onSkip={() => handleSkipStep(currentStep)}
            showTooltip={showContextualTooltip}
            hideTooltip={hideTooltip}
          />
        );
      case 'TeamStep':
        return (
          <TeamStep
            onComplete={(data) => handleStepComplete(currentStep, data)}
            onSkip={() => handleSkipStep(currentStep)}
            showTooltip={showContextualTooltip}
            hideTooltip={hideTooltip}
          />
        );
      case 'IntegrationsStep':
        return (
          <IntegrationsStep
            onComplete={(data) => handleStepComplete(currentStep, data)}
            onSkip={() => handleSkipStep(currentStep)}
            showTooltip={showContextualTooltip}
            hideTooltip={hideTooltip}
          />
        );
      case 'CompleteStep':
        return (
          <CompleteStep
            onComplete={() => {
              handleStepComplete(currentStep);
              navigate('/dashboard');
            }}
            showTooltip={showContextualTooltip}
            hideTooltip={hideTooltip}
          />
        );
      default:
        return <div>Step not found</div>;
    }
  };

  if (isLoading) {
    return (
      <div className="onboarding-loading">
        <div className="loading-spinner"></div>
        <p>Loading your setup...</p>
      </div>
    );
  }

  return (
    <div className="onboarding-wizard">
      {/* Progress Header */}
      <div className="onboarding-header">
        <div className="progress-container">
          <div className="progress-bar">
            <div 
              className="progress-fill" 
              style={{ width: `${progress}%` }}
            ></div>
          </div>
          <div className="progress-text">
            Step {currentStep} of {totalSteps} • {Math.round(progress)}% Complete
          </div>
        </div>
        
        <div className="step-indicators">
          {steps.map((step) => (
            <div
              key={step.id}
              className={`step-indicator ${currentStep === step.id ? 'active' : ''} ${completedSteps.includes(step.id) ? 'completed' : ''}`}
              onClick={() => completedSteps.includes(step.id) && setCurrentStep(step.id)}
            >
              <div className="step-icon">{step.icon}</div>
              <div className="step-info">
                <div className="step-title">{step.title}</div>
                <div className="step-description">{step.description}</div>
              </div>
              {completedSteps.includes(step.id) && (
                <div className="step-check">✓</div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Main Content */}
      <div className="onboarding-content">
        <div className="step-content">
          {renderStepContent()}
        </div>
      </div>

      {/* Tooltip */}
      {showTooltip && (
        <div 
          className="contextual-tooltip"
          style={{
            left: tooltipPosition.x,
            top: tooltipPosition.y
          }}
        >
          {tooltipContent}
          <div className="tooltip-arrow"></div>
        </div>
      )}

      {/* Navigation */}
      <div className="onboarding-navigation">
        <button
          onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}
          disabled={currentStep === 1}
          className="nav-button secondary"
        >
          Previous
        </button>
        
        <div className="step-actions">
          <button
            onClick={() => handleSkipStep(currentStep)}
            className="nav-button skip"
          >
            Skip for now
          </button>
        </div>
      </div>
    </div>
  );
};

// Step Components
const WelcomeStep = ({ onComplete, onSkip, showTooltip, hideTooltip, userData }) => {
  const [formData, setFormData] = useState({
    practiceName: userData.practiceName || '',
    practiceSize: userData.practiceSize || 'medium',
    firstName: userData.firstName || '',
    lastName: userData.lastName || '',
    phone: userData.phone || ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onComplete(formData);
  };

  return (
    <div className="welcome-step">
      <div className="step-header">
        <h1>Welcome to MedSpaSync Pro! 🎉</h1>
        <p>Let's get you set up in just a few minutes. This will help us personalize your experience.</p>
      </div>

      <form onSubmit={handleSubmit} className="welcome-form">
        <div className="form-section">
          <h3>Practice Information</h3>
          
          <div className="form-group">
            <label htmlFor="practiceName">Practice Name</label>
            <input
              type="text"
              id="practiceName"
              value={formData.practiceName}
              onChange={(e) => setFormData({ ...formData, practiceName: e.target.value })}
              placeholder="Enter your practice name"
              required
              onMouseEnter={(e) => showTooltip('Enter the name of your medical spa or practice', e)}
              onMouseLeave={hideTooltip}
            />
          </div>

          <div className="form-group">
            <label htmlFor="practiceSize">Practice Size</label>
            <select
              id="practiceSize"
              value={formData.practiceSize}
              onChange={(e) => setFormData({ ...formData, practiceSize: e.target.value })}
              onMouseEnter={(e) => showTooltip('Select the size that best describes your practice', e)}
              onMouseLeave={hideTooltip}
            >
              <option value="small">Small (1-3 locations, $50K-150K monthly)</option>
              <option value="medium">Medium (4-8 locations, $150K-500K monthly)</option>
              <option value="large">Large (9+ locations, $500K+ monthly)</option>
            </select>
          </div>
        </div>

        <div className="form-section">
          <h3>Your Information</h3>
          
          <div className="form-row">
            <div className="form-group">
              <label htmlFor="firstName">First Name</label>
              <input
                type="text"
                id="firstName"
                value={formData.firstName}
                onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                placeholder="First name"
                required
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="lastName">Last Name</label>
              <input
                type="text"
                id="lastName"
                value={formData.lastName}
                onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                placeholder="Last name"
                required
              />
            </div>
          </div>

          <div className="form-group">
            <label htmlFor="phone">Phone Number (Optional)</label>
            <input
              type="tel"
              id="phone"
              value={formData.phone}
              onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
              placeholder="(555) 123-4567"
            />
          </div>
        </div>

        <div className="welcome-benefits">
          <h3>What you'll get:</h3>
          <ul>
            <li>✅ AI-powered reconciliation with 94.7% accuracy</li>
            <li>✅ Save 15-20 hours per month on manual reconciliation</li>
            <li>✅ Recover thousands in lost revenue</li>
            <li>✅ Real-time insights and reporting</li>
            <li>✅ HIPAA-compliant and secure</li>
          </ul>
        </div>

        <div className="form-actions">
          <button type="submit" className="action-button primary">
            Continue Setup
          </button>
          <button type="button" onClick={onSkip} className="action-button secondary">
            Skip for now
          </button>
        </div>
      </form>
    </div>
  );
};

const UploadStep = ({ onComplete, onSkip, showTooltip, hideTooltip }) => {
  const [uploadedFile, setUploadedFile] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [results, setResults] = useState(null);

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setUploadedFile(file);
    setIsProcessing(true);

    try {
      // Simulate file processing
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Mock results
      setResults({
        accuracy: '94.7%',
        discrepancies: 12,
        potentialSavings: 2500,
        timeSaved: 15
      });
      
      onComplete({ uploadedFile: file.name, results });
    } catch (error) {
      console.error('File processing failed:', error);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="upload-step">
      <div className="step-header">
        <h2>Upload Your First File</h2>
        <p>Upload a sample file to see how our AI reconciliation works in action.</p>
      </div>

      <div className="upload-section">
        {!uploadedFile ? (
          <div className="upload-area">
            <input
              type="file"
              accept=".csv,.xlsx,.xls"
              onChange={handleFileUpload}
              className="file-input"
              id="file-upload"
              onMouseEnter={(e) => showTooltip('Upload any CSV or Excel file from your POS system', e)}
              onMouseLeave={hideTooltip}
            />
            <label htmlFor="file-upload" className="upload-label">
              <div className="upload-icon">📁</div>
              <div className="upload-text">
                <h3>Click to upload or drag and drop</h3>
                <p>CSV, Excel files supported • Max 10MB</p>
              </div>
            </label>
          </div>
        ) : (
          <div className="upload-results">
            {isProcessing ? (
              <div className="processing">
                <div className="processing-spinner"></div>
                <h3>Processing your file...</h3>
                <p>Our AI is analyzing your data</p>
              </div>
            ) : results ? (
              <div className="results-preview">
                <h3>Analysis Complete! 🎉</h3>
                <div className="results-grid">
                  <div className="result-card">
                    <div className="result-value">{results.accuracy}</div>
                    <div className="result-label">Accuracy Rate</div>
                  </div>
                  <div className="result-card">
                    <div className="result-value">{results.discrepancies}</div>
                    <div className="result-label">Discrepancies Found</div>
                  </div>
                  <div className="result-card">
                    <div className="result-value">${results.potentialSavings}</div>
                    <div className="result-label">Potential Savings</div>
                  </div>
                  <div className="result-card">
                    <div className="result-value">{results.timeSaved}hrs</div>
                    <div className="result-label">Time Saved</div>
                  </div>
                </div>
                <p className="results-note">
                  This is just a preview. Continue to see detailed insights and recommendations.
                </p>
              </div>
            ) : null}
          </div>
        )}
      </div>

      <div className="upload-tips">
        <h4>💡 Tips for best results:</h4>
        <ul>
          <li>Include transaction dates, amounts, and service descriptions</li>
          <li>Make sure your file has headers in the first row</li>
          <li>Remove any sensitive information before uploading</li>
          <li>Our AI will automatically detect and map your data fields</li>
        </ul>
      </div>

      <div className="form-actions">
        {results && (
          <button onClick={() => onComplete({ uploadedFile: uploadedFile.name, results })} className="action-button primary">
            Continue to Results
          </button>
        )}
        <button onClick={onSkip} className="action-button secondary">
          Skip for now
        </button>
      </div>
    </div>
  );
};

const ReviewStep = ({ onComplete, onSkip, showTooltip, hideTooltip }) => {
  return (
    <div className="review-step">
      <div className="step-header">
        <h2>Review Your Results</h2>
        <p>See how our AI analyzed your data and found potential issues.</p>
      </div>

      <div className="review-content">
        <div className="insights-section">
          <h3>Key Insights</h3>
          <div className="insights-grid">
            <div className="insight-card">
              <div className="insight-icon">💡</div>
              <div className="insight-content">
                <h4>High Discrepancy Rate</h4>
                <p>Found 12 discrepancies in your data, suggesting potential issues with your current reconciliation process.</p>
              </div>
            </div>
            <div className="insight-card">
              <div className="insight-icon">💰</div>
              <div className="insight-content">
                <h4>Revenue Recovery Opportunity</h4>
                <p>Potential to recover $2,500 in lost revenue through improved reconciliation.</p>
              </div>
            </div>
            <div className="insight-card">
              <div className="insight-icon">⏰</div>
              <div className="insight-content">
                <h4>Time Savings Available</h4>
                <p>Could save 15 hours per month by automating reconciliation processes.</p>
              </div>
            </div>
          </div>
        </div>

        <div className="recommendations-section">
          <h3>Recommendations</h3>
          <div className="recommendations-list">
            <div className="recommendation-item">
              <div className="recommendation-priority high">High Priority</div>
              <h4>Implement Automated Reconciliation</h4>
              <p>High discrepancy rate indicates need for automated reconciliation system.</p>
            </div>
            <div className="recommendation-item">
              <div className="recommendation-priority medium">Medium Priority</div>
              <h4>Review Payment Processing</h4>
              <p>Significant revenue recovery opportunity suggests payment processing issues.</p>
            </div>
            <div className="recommendation-item">
              <div className="recommendation-priority low">Low Priority</div>
              <h4>Regular Data Quality Audits</h4>
              <p>Implement regular audits to maintain data quality and prevent future discrepancies.</p>
            </div>
          </div>
        </div>
      </div>

      <div className="form-actions">
        <button onClick={() => onComplete({ reviewed: true })} className="action-button primary">
          Continue to Settings
        </button>
        <button onClick={onSkip} className="action-button secondary">
          Skip for now
        </button>
      </div>
    </div>
  );
};

const SettingsStep = ({ onComplete, onSkip, showTooltip, hideTooltip }) => {
  const [settings, setSettings] = useState({
    notifications: {
      email: true,
      sms: false,
      inApp: true
    },
    reconciliation: {
      autoProcess: true,
      confidenceThreshold: 85,
      reviewRequired: true
    },
    reporting: {
      daily: false,
      weekly: true,
      monthly: true
    }
  });

  const handleSettingChange = (category, key, value) => {
    setSettings(prev => ({
      ...prev,
      [category]: {
        ...prev[category],
        [key]: value
      }
    }));
  };

  return (
    <div className="settings-step">
      <div className="step-header">
        <h2>Configure Your Settings</h2>
        <p>Customize your preferences and notification settings.</p>
      </div>

      <div className="settings-content">
        <div className="settings-section">
          <h3>Notifications</h3>
          <div className="settings-group">
            <label className="setting-item">
              <input
                type="checkbox"
                checked={settings.notifications.email}
                onChange={(e) => handleSettingChange('notifications', 'email', e.target.checked)}
              />
              <span>Email notifications</span>
            </label>
            <label className="setting-item">
              <input
                type="checkbox"
                checked={settings.notifications.sms}
                onChange={(e) => handleSettingChange('notifications', 'sms', e.target.checked)}
              />
              <span>SMS notifications</span>
            </label>
            <label className="setting-item">
              <input
                type="checkbox"
                checked={settings.notifications.inApp}
                onChange={(e) => handleSettingChange('notifications', 'inApp', e.target.checked)}
              />
              <span>In-app notifications</span>
            </label>
          </div>
        </div>

        <div className="settings-section">
          <h3>Reconciliation Settings</h3>
          <div className="settings-group">
            <label className="setting-item">
              <input
                type="checkbox"
                checked={settings.reconciliation.autoProcess}
                onChange={(e) => handleSettingChange('reconciliation', 'autoProcess', e.target.checked)}
              />
              <span>Auto-process new files</span>
            </label>
            <label className="setting-item">
              <input
                type="checkbox"
                checked={settings.reconciliation.reviewRequired}
                onChange={(e) => handleSettingChange('reconciliation', 'reviewRequired', e.target.checked)}
              />
              <span>Require manual review for low confidence matches</span>
            </label>
            <div className="setting-slider">
              <label>Confidence threshold: {settings.reconciliation.confidenceThreshold}%</label>
              <input
                type="range"
                min="70"
                max="95"
                value={settings.reconciliation.confidenceThreshold}
                onChange={(e) => handleSettingChange('reconciliation', 'confidenceThreshold', parseInt(e.target.value))}
              />
            </div>
          </div>
        </div>

        <div className="settings-section">
          <h3>Reporting Schedule</h3>
          <div className="settings-group">
            <label className="setting-item">
              <input
                type="checkbox"
                checked={settings.reporting.daily}
                onChange={(e) => handleSettingChange('reporting', 'daily', e.target.checked)}
              />
              <span>Daily summary reports</span>
            </label>
            <label className="setting-item">
              <input
                type="checkbox"
                checked={settings.reporting.weekly}
                onChange={(e) => handleSettingChange('reporting', 'weekly', e.target.checked)}
              />
              <span>Weekly detailed reports</span>
            </label>
            <label className="setting-item">
              <input
                type="checkbox"
                checked={settings.reporting.monthly}
                onChange={(e) => handleSettingChange('reporting', 'monthly', e.target.checked)}
              />
              <span>Monthly performance reports</span>
            </label>
          </div>
        </div>
      </div>

      <div className="form-actions">
        <button onClick={() => onComplete({ settings })} className="action-button primary">
          Continue to Team Setup
        </button>
        <button onClick={onSkip} className="action-button secondary">
          Skip for now
        </button>
      </div>
    </div>
  );
};

const TeamStep = ({ onComplete, onSkip, showTooltip, hideTooltip }) => {
  const [teamMembers, setTeamMembers] = useState([]);
  const [newMember, setNewMember] = useState({
    email: '',
    role: 'STAFF',
    permissions: ['view_reports', 'upload_files']
  });

  const addTeamMember = () => {
    if (newMember.email) {
      setTeamMembers([...teamMembers, { ...newMember, id: Date.now() }]);
      setNewMember({ email: '', role: 'STAFF', permissions: ['view_reports', 'upload_files'] });
    }
  };

  const removeTeamMember = (id) => {
    setTeamMembers(teamMembers.filter(member => member.id !== id));
  };

  return (
    <div className="team-step">
      <div className="step-header">
        <h2>Invite Your Team</h2>
        <p>Add your staff members to collaborate on reconciliation and reporting.</p>
      </div>

      <div className="team-content">
        <div className="team-members">
          <h3>Current Team Members</h3>
          {teamMembers.length === 0 ? (
            <div className="empty-state">
              <div className="empty-icon">👥</div>
              <p>No team members added yet</p>
            </div>
          ) : (
            <div className="members-list">
              {teamMembers.map(member => (
                <div key={member.id} className="member-item">
                  <div className="member-info">
                    <div className="member-email">{member.email}</div>
                    <div className="member-role">{member.role}</div>
                  </div>
                  <button onClick={() => removeTeamMember(member.id)} className="remove-member">
                    Remove
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>

        <div className="add-member">
          <h3>Add New Team Member</h3>
          <div className="add-member-form">
            <div className="form-row">
              <input
                type="email"
                placeholder="Enter email address"
                value={newMember.email}
                onChange={(e) => setNewMember({ ...newMember, email: e.target.value })}
              />
              <select
                value={newMember.role}
                onChange={(e) => setNewMember({ ...newMember, role: e.target.value })}
              >
                <option value="STAFF">Staff</option>
                <option value="MANAGER">Manager</option>
                <option value="ADMIN">Admin</option>
              </select>
              <button onClick={addTeamMember} className="add-button">
                Add
              </button>
            </div>
          </div>
        </div>

        <div className="team-tips">
          <h4>💡 Team Roles:</h4>
          <ul>
            <li><strong>Staff:</strong> View reports, upload files</li>
            <li><strong>Manager:</strong> All staff permissions + manage team</li>
            <li><strong>Admin:</strong> Full access to all features and settings</li>
          </ul>
        </div>
      </div>

      <div className="form-actions">
        <button onClick={() => onComplete({ teamMembers })} className="action-button primary">
          Continue to Integrations
        </button>
        <button onClick={onSkip} className="action-button secondary">
          Skip for now
        </button>
      </div>
    </div>
  );
};

const IntegrationsStep = ({ onComplete, onSkip, showTooltip, hideTooltip }) => {
  const [integrations, setIntegrations] = useState({
    posSystem: '',
    paymentProcessor: '',
    accountingSoftware: ''
  });

  const posSystems = [
    { id: 'zenoti', name: 'Zenoti', logo: '🏥' },
    { id: 'mindbody', name: 'Mindbody', logo: '💼' },
    { id: 'vagaro', name: 'Vagaro', logo: '📱' },
    { id: 'booksy', name: 'Booksy', logo: '📅' },
    { id: 'other', name: 'Other', logo: '🔗' }
  ];

  const selectIntegration = (type, value) => {
    setIntegrations(prev => ({ ...prev, [type]: value }));
  };

  return (
    <div className="integrations-step">
      <div className="step-header">
        <h2>Connect Your Systems</h2>
        <p>Connect your existing POS and payment systems for automatic data synchronization.</p>
      </div>

      <div className="integrations-content">
        <div className="integration-section">
          <h3>POS System</h3>
          <div className="integration-options">
            {posSystems.map(system => (
              <div
                key={system.id}
                className={`integration-option ${integrations.posSystem === system.id ? 'selected' : ''}`}
                onClick={() => selectIntegration('posSystem', system.id)}
              >
                <div className="integration-logo">{system.logo}</div>
                <div className="integration-name">{system.name}</div>
              </div>
            ))}
          </div>
        </div>

        <div className="integration-section">
          <h3>Payment Processor</h3>
          <div className="integration-options">
            {['Stripe', 'Square', 'PayPal', 'Authorize.net', 'Other'].map(processor => (
              <div
                key={processor}
                className={`integration-option ${integrations.paymentProcessor === processor ? 'selected' : ''}`}
                onClick={() => selectIntegration('paymentProcessor', processor)}
              >
                <div className="integration-logo">💳</div>
                <div className="integration-name">{processor}</div>
              </div>
            ))}
          </div>
        </div>

        <div className="integration-section">
          <h3>Accounting Software</h3>
          <div className="integration-options">
            {['QuickBooks', 'Xero', 'FreshBooks', 'Wave', 'Other'].map(accounting => (
              <div
                key={accounting}
                className={`integration-option ${integrations.accountingSoftware === accounting ? 'selected' : ''}`}
                onClick={() => selectIntegration('accountingSoftware', accounting)}
              >
                <div className="integration-logo">📊</div>
                <div className="integration-name">{accounting}</div>
              </div>
            ))}
          </div>
        </div>

        <div className="integration-note">
          <h4>🔒 Secure & HIPAA Compliant</h4>
          <p>All integrations use secure APIs and are fully HIPAA compliant. Your data is encrypted and never shared with third parties.</p>
        </div>
      </div>

      <div className="form-actions">
        <button onClick={() => onComplete({ integrations })} className="action-button primary">
          Complete Setup
        </button>
        <button onClick={onSkip} className="action-button secondary">
          Skip for now
        </button>
      </div>
    </div>
  );
};

const CompleteStep = ({ onComplete, showTooltip, hideTooltip }) => {
  return (
    <div className="complete-step">
      <div className="step-header">
        <h2>🎉 You're All Set!</h2>
        <p>Congratulations! Your MedSpaSync Pro setup is complete.</p>
      </div>

      <div className="completion-content">
        <div className="completion-checkmark">
          <div className="checkmark">✓</div>
        </div>

        <div className="completion-summary">
          <h3>What's Next?</h3>
          <div className="next-steps">
            <div className="next-step">
              <div className="step-number">1</div>
              <div className="step-content">
                <h4>Upload Your Data</h4>
                <p>Start by uploading your first reconciliation file</p>
              </div>
            </div>
            <div className="next-step">
              <div className="step-number">2</div>
              <div className="step-content">
                <h4>Review Results</h4>
                <p>See how our AI identifies discrepancies and opportunities</p>
              </div>
            </div>
            <div className="next-step">
              <div className="step-number">3</div>
              <div className="step-content">
                <h4>Start Saving</h4>
                <p>Begin recovering lost revenue and saving time</p>
              </div>
            </div>
          </div>
        </div>

        <div className="completion-benefits">
          <h3>You now have access to:</h3>
          <ul>
            <li>✅ AI-powered reconciliation with 94.7% accuracy</li>
            <li>✅ Real-time analytics and reporting</li>
            <li>✅ Automated discrepancy detection</li>
            <li>✅ Team collaboration tools</li>
            <li>✅ 24/7 support and training resources</li>
          </ul>
        </div>

        <div className="completion-cta">
          <h3>Ready to start?</h3>
          <p>Your dashboard is ready with sample data to explore. Start uploading your real data when you're ready.</p>
        </div>
      </div>

      <div className="form-actions">
        <button onClick={onComplete} className="action-button primary">
          Go to Dashboard
        </button>
      </div>
    </div>
  );
};

export default GuidedOnboardingWizard; 