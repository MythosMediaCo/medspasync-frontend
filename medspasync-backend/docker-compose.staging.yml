version: '3.9'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medspasync-backend-staging
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=staging
      - PORT=5000
      - DATABASE_URL=${DATABASE_URL}
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - ML_SERVICE_URL=${ML_SERVICE_URL}
      - AI_API_KEY=${AI_API_KEY}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM:-staging@medspasyncpro.com}
      - UPLOAD_MAX_MB=25
      - DEFAULT_CONFIDENCE_THRESHOLD=0.90
      - PROCESSING_BATCH_SIZE=200
      - MAX_TRANSACTIONS_PER_JOB=50000
      - AI_TIMEOUT=600000
      - MAX_CONCURRENT_AI_JOBS=5
      - JOB_RETENTION_DAYS=30
      - MAX_JOBS_PER_USER=50
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - medspasync-staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Staging PostgreSQL Database
  postgres-staging:
    image: postgres:15-alpine
    container_name: medspasync-postgres-staging
    restart: unless-stopped
    environment:
      - POSTGRES_DB=medspasync_staging
      - POSTGRES_USER=${POSTGRES_USER:-medspasync}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-staging_password}
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - medspasync-staging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-medspasync}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Staging MongoDB (for legacy data)
  mongo-staging:
    image: mongo:6
    container_name: medspasync-mongo-staging
    restart: unless-stopped
    environment:
      - MONGO_INITDB_DATABASE=medspasync_staging
    volumes:
      - mongo_staging_data:/data/db
    ports:
      - "27018:27017"
    networks:
      - medspasync-staging
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Staging Redis (for caching and sessions)
  redis-staging:
    image: redis:7-alpine
    container_name: medspasync-redis-staging
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_staging_data:/data
    networks:
      - medspasync-staging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Staging Nginx (reverse proxy)
  nginx-staging:
    image: nginx:alpine
    container_name: medspasync-nginx-staging
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    networks:
      - medspasync-staging
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_staging_data:
    driver: local
  mongo_staging_data:
    driver: local
  redis_staging_data:
    driver: local

networks:
  medspasync-staging:
    driver: bridge 